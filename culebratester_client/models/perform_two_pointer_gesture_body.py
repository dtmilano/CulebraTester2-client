# coding: utf-8

"""
    CulebraTester

    ## Snaky Android Test --- If you want to be able to try out the API using the **Execute** or **TRY** button from this page - an android device should be connected using `adb` - the server should have been started using `./culebratester2 start-server`  then you will be able to invoke the API and see the responses.   # noqa: E501

    OpenAPI spec version: 2.0.58
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PerformTwoPointerGestureBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_point1': 'Point',
        'start_point2': 'Point',
        'end_point1': 'Point',
        'end_point2': 'Point',
        'steps': 'int'
    }

    attribute_map = {
        'start_point1': 'startPoint1',
        'start_point2': 'startPoint2',
        'end_point1': 'endPoint1',
        'end_point2': 'endPoint2',
        'steps': 'steps'
    }

    def __init__(self, start_point1=None, start_point2=None, end_point1=None, end_point2=None, steps=None):  # noqa: E501
        """PerformTwoPointerGestureBody - a model defined in Swagger"""  # noqa: E501
        self._start_point1 = None
        self._start_point2 = None
        self._end_point1 = None
        self._end_point2 = None
        self._steps = None
        self.discriminator = None
        self.start_point1 = start_point1
        self.start_point2 = start_point2
        self.end_point1 = end_point1
        self.end_point2 = end_point2
        self.steps = steps

    @property
    def start_point1(self):
        """Gets the start_point1 of this PerformTwoPointerGestureBody.  # noqa: E501


        :return: The start_point1 of this PerformTwoPointerGestureBody.  # noqa: E501
        :rtype: Point
        """
        return self._start_point1

    @start_point1.setter
    def start_point1(self, start_point1):
        """Sets the start_point1 of this PerformTwoPointerGestureBody.


        :param start_point1: The start_point1 of this PerformTwoPointerGestureBody.  # noqa: E501
        :type: Point
        """
        if start_point1 is None:
            raise ValueError("Invalid value for `start_point1`, must not be `None`")  # noqa: E501

        self._start_point1 = start_point1

    @property
    def start_point2(self):
        """Gets the start_point2 of this PerformTwoPointerGestureBody.  # noqa: E501


        :return: The start_point2 of this PerformTwoPointerGestureBody.  # noqa: E501
        :rtype: Point
        """
        return self._start_point2

    @start_point2.setter
    def start_point2(self, start_point2):
        """Sets the start_point2 of this PerformTwoPointerGestureBody.


        :param start_point2: The start_point2 of this PerformTwoPointerGestureBody.  # noqa: E501
        :type: Point
        """
        if start_point2 is None:
            raise ValueError("Invalid value for `start_point2`, must not be `None`")  # noqa: E501

        self._start_point2 = start_point2

    @property
    def end_point1(self):
        """Gets the end_point1 of this PerformTwoPointerGestureBody.  # noqa: E501


        :return: The end_point1 of this PerformTwoPointerGestureBody.  # noqa: E501
        :rtype: Point
        """
        return self._end_point1

    @end_point1.setter
    def end_point1(self, end_point1):
        """Sets the end_point1 of this PerformTwoPointerGestureBody.


        :param end_point1: The end_point1 of this PerformTwoPointerGestureBody.  # noqa: E501
        :type: Point
        """
        if end_point1 is None:
            raise ValueError("Invalid value for `end_point1`, must not be `None`")  # noqa: E501

        self._end_point1 = end_point1

    @property
    def end_point2(self):
        """Gets the end_point2 of this PerformTwoPointerGestureBody.  # noqa: E501


        :return: The end_point2 of this PerformTwoPointerGestureBody.  # noqa: E501
        :rtype: Point
        """
        return self._end_point2

    @end_point2.setter
    def end_point2(self, end_point2):
        """Sets the end_point2 of this PerformTwoPointerGestureBody.


        :param end_point2: The end_point2 of this PerformTwoPointerGestureBody.  # noqa: E501
        :type: Point
        """
        if end_point2 is None:
            raise ValueError("Invalid value for `end_point2`, must not be `None`")  # noqa: E501

        self._end_point2 = end_point2

    @property
    def steps(self):
        """Gets the steps of this PerformTwoPointerGestureBody.  # noqa: E501

        the number of steps for the gesture. Steps are injected about 5 milliseconds apart, so 100 steps may take around 0.5 seconds to complete.  # noqa: E501

        :return: The steps of this PerformTwoPointerGestureBody.  # noqa: E501
        :rtype: int
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this PerformTwoPointerGestureBody.

        the number of steps for the gesture. Steps are injected about 5 milliseconds apart, so 100 steps may take around 0.5 seconds to complete.  # noqa: E501

        :param steps: The steps of this PerformTwoPointerGestureBody.  # noqa: E501
        :type: int
        """
        if steps is None:
            raise ValueError("Invalid value for `steps`, must not be `None`")  # noqa: E501

        self._steps = steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PerformTwoPointerGestureBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PerformTwoPointerGestureBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
